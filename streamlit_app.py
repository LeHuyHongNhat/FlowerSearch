import streamlit as st
import requests
from PIL import Image
import io
import os
import base64
from pathlib import Path
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="Flower Search System",
    page_icon="üå∏",
    layout="wide"
)

# Ti√™u ƒë·ªÅ v√† m√¥ t·∫£
st.title("üå∏ Flower Search System")
st.markdown("""
T√¨m ki·∫øm hoa t∆∞∆°ng t·ª± d·ª±a tr√™n h√¨nh ·∫£nh. H·ªá th·ªëng s·∫Ω tr·∫£ v·ªÅ 3 h√¨nh ·∫£nh c√≥ ƒë·ªô t∆∞∆°ng ƒë·ªìng cao nh·∫•t.
""")

# Upload section
st.subheader("Upload Image")
uploaded_file = st.file_uploader("Ch·ªçn m·ªôt h√¨nh ·∫£nh hoa...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Hi·ªÉn th·ªã h√¨nh ·∫£nh ƒë√£ upload
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", width=300)  # Gi·ªõi h·∫°n chi·ªÅu r·ªông 300px
    
    # N√∫t t√¨m ki·∫øm
    if st.button("T√¨m ki·∫øm"):
        # Chu·∫©n b·ªã file ƒë·ªÉ g·ª≠i ƒë·∫øn API
        files = {"file": (uploaded_file.name, uploaded_file.getvalue())}
        
        try:
            # G·ª≠i request ƒë·∫øn FastAPI backend
            response = requests.post("http://localhost:8000/search", files=files)
            logger.info(f"Response status code: {response.status_code}")
            
            if response.status_code == 200:
                results = response.json()
                logger.info(f"Response data: {results}")
                
                if results.get("status") == "success":
                    st.subheader("K·∫øt qu·∫£ t√¨m ki·∫øm")
                    
                    # T·∫°o 3 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
                    cols = st.columns(3)
                    
                    # Hi·ªÉn th·ªã 3 h√¨nh ·∫£nh t∆∞∆°ng t·ª±
                    for i, (col, similar_image) in enumerate(zip(cols, results["similar_images"])):
                        with col:
                            try:
                                image_path = similar_image["image_path"]
                                logger.info(f"Trying to load image: {image_path}")
                                
                                # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
                                if os.path.exists(image_path):
                                    img = Image.open(image_path)
                                    st.image(img, width=250)  # Gi·ªõi h·∫°n chi·ªÅu r·ªông 250px
                                    
                                    # Hi·ªÉn th·ªã ƒë·ªô t∆∞∆°ng ƒë·ªìng
                                    similarity = 1 - similar_image["distance"]
                                    st.markdown(f"**ƒê·ªô t∆∞∆°ng ƒë·ªìng:** {similarity:.2%}")
                                    
                                    # Hi·ªÉn th·ªã th√¥ng tin file chi ti·∫øt h∆°n
                                    file_path = Path(image_path)
                                    st.markdown(f"""
                                    **Th√¥ng tin file:**
                                    - T√™n file: {file_path.name}
                                    - Th∆∞ m·ª•c: {file_path.parent.name}
                                    - ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß: {image_path}
                                    """)
                                else:
                                    st.error(f"Kh√¥ng t√¨m th·∫•y file: {image_path}")
                                    logger.error(f"File not found: {image_path}")
                            except Exception as e:
                                st.error(f"L·ªói khi hi·ªÉn th·ªã h√¨nh ·∫£nh: {str(e)}")
                                logger.error(f"Error displaying image: {str(e)}")
                else:
                    st.error(f"L·ªói t·ª´ server: {results.get('message', 'Unknown error')}")
            else:
                st.error(f"C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm. Status code: {response.status_code}")
                st.error(f"Response: {response.text}")
        except Exception as e:
            st.error(f"L·ªói k·∫øt n·ªëi ƒë·∫øn server: {str(e)}")
            logger.error(f"Connection error: {str(e)}")
            st.info("H√£y ƒë·∫£m b·∫£o FastAPI server ƒëang ch·∫°y t·∫°i http://localhost:8000")

# Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
with st.expander("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
    st.markdown("""
    1. Upload m·ªôt h√¨nh ·∫£nh hoa b·∫±ng c√°ch k√©o th·∫£ ho·∫∑c ch·ªçn file
    2. Nh·∫•n n√∫t 'T√¨m ki·∫øm' ƒë·ªÉ t√¨m c√°c h√¨nh ·∫£nh t∆∞∆°ng t·ª±
    3. H·ªá th·ªëng s·∫Ω hi·ªÉn th·ªã 3 h√¨nh ·∫£nh c√≥ ƒë·ªô t∆∞∆°ng ƒë·ªìng cao nh·∫•t
    4. M·ªói k·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ƒë·ªô t∆∞∆°ng ƒë·ªìng v·ªõi h√¨nh ·∫£nh g·ªëc
    """)

# Th√™m th√¥ng tin v·ªÅ h·ªá th·ªëng
with st.expander("Th√¥ng tin v·ªÅ h·ªá th·ªëng"):
    st.markdown("""
    H·ªá th·ªëng s·ª≠ d·ª•ng:
    - ResNet50 ƒë·ªÉ tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng h√¨nh ·∫£nh
    - ChromaDB ƒë·ªÉ l∆∞u tr·ªØ v√† t√¨m ki·∫øm vector
    - FastAPI l√†m backend
    - Streamlit l√†m frontend
    """)

# Th√™m ph·∫ßn debug
with st.expander("Debug Information"):
    st.markdown("### Current Working Directory")
    st.code(os.getcwd())
    
    st.markdown("### Static Directory Contents")
    static_dir = "static"
    if os.path.exists(static_dir):
        st.code("\n".join(os.listdir(static_dir)))
    else:
        st.error(f"Static directory not found: {static_dir}")
    
    st.markdown("### Uploads Directory Contents")
    uploads_dir = os.path.join(static_dir, "uploads")
    if os.path.exists(uploads_dir):
        st.code("\n".join(os.listdir(uploads_dir)))
    else:
        st.error(f"Uploads directory not found: {uploads_dir}")
    
    # Th√™m th√¥ng tin v·ªÅ Dataset directory
    st.markdown("### Dataset Directory Contents")
    dataset_dir = "Dataset"
    if os.path.exists(dataset_dir):
        for root, dirs, files in os.walk(dataset_dir):
            st.markdown(f"#### Directory: {root}")
            st.code("\n".join(files))
    else:
        st.error(f"Dataset directory not found: {dataset_dir}") 